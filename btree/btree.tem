// constructor
template <typename T>
btree<T>::btree(size_t maxNodeElems) {
   root_ = new node<T>(maxNodeElems, nullptr, 0);
   assert (root_ != nullptr);
}

// Copy constructor
template <typename T>
btree<T>::btree(const btree<T>& original) {
   root_ = new node<T> (*(original.root_), nullptr);
}

// move constructor
template <typename T>
btree<T>::btree(btree<T>&& original) {
    root_ = original.root_;
    original.root_ = nullptr;
}

// copy assignment
template <typename T>
btree<T>& btree<T>::operator=(const btree<T>& rhs) {
    delete root_;
    root_ = new node<T> (*(rhs.root_), nullptr);
    return *this;
}

// move assignment
template <typename T>
btree<T>& btree<T>::operator=(btree<T>&& rhs) {
    delete root_;
    root_ = rhs.root_;
    rhs.root_ = nullptr;
    return *this;
}

// insert into the tree
template <typename T>
std::pair<btree_iterator<T>, bool> btree<T>::insert(const T& elem) {
#ifdef _DEBUG_
    std::cout << "btree insertion called\n";
#endif
    assert (root_ != nullptr);
    std::pair<btree_iterator<T>, bool> tmp = root_->insert (elem);
#ifdef _DEBUG_
    std::cout << "successfully called node insert\n";
#endif

    return tmp; 
}

// iterator
template <typename T>
btree_iterator<T> btree<T>::find(const T& elem) {
    std::pair<node<T>*, unsigned int> result = root_->find (elem);
    return btree_iterator<T>(result.first, result.second, root_);
}

// const_iterator
template <typename T>
const_btree_iterator<T> btree<T>::find(const T& elem) const {
    std::pair<node<T>*, unsigned int> result = root_->find (elem);
    return const_btree_iterator<T>(result.first, result.second, root_);
}

// destructor
template <typename T>
btree<T>::~btree() {
    delete root_;
}

/***********************/
/*  Iterator Business  */
/***********************/

template <typename T>
btree_iterator<T> btree<T>::begin () const {
    // go as far down and as far left as possible
    node<T> * target = root_;
    // Does this node have children?

    while (target->data_.size () == target->node_size_) { // yes it can
        // Then the left most is either the leftmost of child 0 or my own data at index 0
        if (target->children_[0] == nullptr) { // then its just index 0 here
            return btree_iterator<T> (target, 0, root_);
        } else { // repeat on lower level
            assert (target->children_[0] != nullptr);
            target = target->children_[0];
        }
    }
    
    // If we get to this point, we've gotten to a node where
    // 1. It may or may not have children
    // 2. but it does not have a child at index 0
    return btree_iterator<T> (target, 0, root_);
}

template <typename T>
btree_iterator<T> btree<T>:: end () const {
    btree_iterator<T> i (nullptr, 0, root_);
    return i;
}

// Const Standard
template <typename T>
const_btree_iterator<T> btree<T>::cbegin () const {
    btree_iterator<T> bi = begin ();
    return const_btree_iterator<T> (bi.target_, 0, bi.root_);
}

template <typename T>
const_btree_iterator<T> btree<T>::cend () const {
    btree_iterator<T> bi = end ();
    return const_btree_iterator<T> (bi.target_, 0, bi.root_);
}

// Reverse
template <typename T>
std::reverse_iterator<btree_iterator<T>> btree<T>::rbegin () const {
    return std::reverse_iterator<btree_iterator<T>>(end());
}

template <typename T>
std::reverse_iterator<btree_iterator<T>> btree<T>::rend () const {
    return std::reverse_iterator<btree_iterator<T>>(begin());
}

// Const Reverse
template <typename T>
std::reverse_iterator<const_btree_iterator<T>> btree<T>::crbegin () const {
    return std::reverse_iterator<const_btree_iterator<T>>(end());
}

template <typename T>
std::reverse_iterator<const_btree_iterator<T>> btree<T>::crend () const {
    return std::reverse_iterator<const_btree_iterator<T>>(begin());
}

/***********************/
/* Node Implementation */
/***********************/

// node constructor
template <typename T>
node<T>::node (const unsigned int node_size, node<T> * parent, const unsigned int child_index) : 
    node_size_(node_size), parent_(parent), child_index_(child_index), 
    max_children_(node_size + 1), max_children_index_(node_size) {
#ifdef _DEBUG_
    std::cout << "Node being constructed.\n";
#endif
    // There is one more children than there is data items
    unsigned int number = node_size + 1;
    children_ = new node<T>* [number](); // added () for zero initialization
    unsigned int idx = 0;
    while (idx < number) {
#ifdef _DEBUG_
        std::cout << "Setting data location " << idx << " to nullptr\n";
#endif
        children_[idx] = nullptr;
        idx++;
    }
#ifdef _DEBUG_
        std::cout << "Node construction completed.\n";
#endif
}

// node copy construction
template <typename T>
node<T>::node (const node<T>& other, const node<T>* newParent) :
    node_size_(other.node_size_), parent_(const_cast<node<T>*>(newParent)), child_index_(other.child_index_),
    max_children_(other.max_children_), max_children_index_(other.max_children_index_) {

    // copy data_ which is an STL vector, so copy is implemented
    data_ = other.data_;

    // copy children, which is a bit more difficult
    children_ = new node<T>* [max_children_]();
    unsigned int idx = 0;
    assert (max_children_ == max_children_index_ + 1);
    while (idx < max_children_) {
        if (other.children_[idx] != nullptr) {
            node<T> * clone = new node<T> (*(other.children_[idx]), this);
            assert (clone != nullptr);
            children_[idx] = clone;
        }
        idx++;
    }
}

// node destructor
template <typename T>
node<T>::~node () {
    // data_ does not need explicit deletion.
    // Call destructors of each child.
    unsigned int idx = 0;
    // There is one more child than node_size_
    while (idx <= node_size_) {
        if (children_[idx] != nullptr) {
            delete children_[idx];
        }
        idx++;
    }
    // Then delete the actual children array
    if (children_ != nullptr) {
        delete children_;
    }
}

// insert an element into the btree
template <typename T>
std::pair<btree_iterator<T>, bool> node<T>::insert (const T& elem) {
#ifdef _DEBUG_
    std::cout << "node insertion called.\n";
#endif
    // we need to find out root to create a iterators:
    node<T> * root = this;
    while (root->parent_ != nullptr) {
        root = root->parent_;
    }

    // Lets see if it has a place in this node
    if (data_.size() < node_size_) {
        unsigned int idx = 0;
        auto i = data_.begin();
        for (; i != data_.end(); ++i) {
#ifdef _DEBUG
            std::cout << "performing dupe check on " << *i << " vs " << elem << " \n";
#endif
            if (*i == elem) { // It's already there
                return std::make_pair(btree_iterator<T> (this, idx, root), false);
            } else if (*i > elem) { // it goes on the left.
                break;
            }
            idx++;
        }
        // If it hasn't reached data.end(), it's on the left of some element.
        // iterator.insert behaves exactly like this
        if (i != data_.end()) {
            data_.insert (i, elem);
        // The iterator reached the end, indicating the correct position
        // is right at the end of the list, since this node is not full
        } else if (i == data_.end()) {
            data_.push_back (elem);
        }
        return std::make_pair (btree_iterator<T> (this, idx, root), true);
    // no room here, delegate to a child
    } else {
#ifdef _DEBUG_
        std::cout << "Insertion needs to delegate.\n";
#endif
        unsigned int childIndex = 0;
        for (auto dataItem = data_.begin(); dataItem != data_.end(); ++dataItem) {
            if (*dataItem == elem) { // Already exists!
                return std::make_pair(btree_iterator<T> (this, childIndex, root), false);
            } else if (*dataItem > elem) { // it goes on the left of this one
#ifdef _DEBUG_
                std::cout << "Insertion is delegating to the child left of " << *dataItem << "\n";
#endif
                if (children_[childIndex] == nullptr) {
#ifdef _DEBUG_
                std::cout << "Insertion has found it's null, spawning a child" << "\n";
#endif
                    children_[childIndex] = new node<T> (node_size_, this, childIndex);
                    children_[childIndex]->parent_ = this;
                }
                return children_[childIndex]->insert (elem);
            }
            childIndex++;
        }
        // If it reached here, It must be on the right of the last element.
#ifdef _DEBUG_
        std::cout << "Insertion has not found a suitable left child, delegating to child in slot " << childIndex << "\n";
#endif
        if (children_[childIndex] == nullptr) {
            children_[childIndex] = new node<T> (node_size_, this, childIndex);
        }
        return children_[childIndex]->insert (elem);
    }

    // Should never reach this point.
    assert (false);
}

// find an element in the btree
template <typename T>
std::pair<node<T> *, unsigned int>  node<T>::find (const T& elem) {
    // See if the element is here
    unsigned int index = 0;
    auto i = data_.begin();
    for (;i != data_.end(); ++i) {
        if (*i == elem) {
            return std::make_pair (this, index);
        }
        if (*i > elem) { // Left child
            if (children_[index] != nullptr) {
#ifdef _DEBUG_
                std::cout << "Find delegating to a child on the left of " << *i << "\n";
#endif
                return children_[index]->find (elem);
            } else {
#ifdef _DEBUG_
                std::cout << "Find wanted to delegate to a child on he left of " << *i << " but it was null\n";;
#endif
                return std::make_pair(static_cast<node<T>*> (nullptr), 0);
            }
        }
        index++;
    }

    // If we get to this point, it wasn't on the left of any element
    // There's only one spot left, the rightmost slot.
    // It just so happens that index is also this index, since it is post incremented.
    if (children_[index] == nullptr) {
        return std::make_pair(static_cast<node<T>*> (nullptr), 0);
    } else {
        return children_[index]->find (elem);
    }
}

// Find the next data item
// This assumes you have exausted all of the data elements in this node.
// This assumes you have printed out all children of this node
template <typename T>
std::pair<node<T> *, unsigned int> node<T>::next_node (void) {
    if (parent_ == nullptr) {
        return std::make_pair(static_cast<node<T>*> (nullptr), 0);
    }

    assert (parent_ != nullptr);

    if (child_index_ == max_children_index_) {
        // We're the rightmost child of someone
        // So just return our parent's -> next ();
        return parent_->next_node();
    } else { // We were not the rightmost child of someone.
        return std::make_pair(parent_, child_index_);
    }

    assert (false);
}

// Find the previous data item
// This assumes you have exausted all of the data elements in this node.
// This assumes you have printed out all children of this node
template <typename T>
std::pair<node<T> *, unsigned int> node<T>::previous_node (void) {
    if (parent_ == nullptr) {
        return std::make_pair(static_cast<node<T>*> (nullptr), 0);
    }

    assert (parent_ != nullptr);

    if (child_index_ == 0) {
        // We're the leftmost of our parent.
        // return their previous_node()
        return parent_->previous_node();
    } else { // We were not the leftmost child of a parent
        // Say we are child 1.
        // The correct parental data index is 0, since our index (1) is on the right of index 0's data.
        return std::make_pair(parent_, child_index_ - 1);
    }

    assert (false);
}


// output tree to stream with space delimiter
// Well apparently you guys want a breadth first search....
// So here goes
template <typename T>
std::ostream& operator<<(std::ostream& os, const btree<T>& tree) {
    std::queue<node<T> *> q;
    if (tree.root_ != nullptr) { // It actually has elements
        q.push (tree.root_);
    }
    while (q.empty () == false) {
        node<T> * current = q.front ();
        q.pop ();
        assert (current != nullptr);
        // Print out all the elements in this node.
        for (auto elem = current->data_.begin(); elem != current->data_.end(); ++elem) {
            os << *elem << " ";
        }
        // Queue each of the children.
        unsigned int idx = 0;
        while (idx <= current->max_children_index_) {
            if (current->children_[idx] != nullptr) {
                q.push (current->children_[idx]);
            }
            idx++;
        }
    }
    return os;
}

